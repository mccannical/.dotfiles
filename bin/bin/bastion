#!/usr/bin/env bash
# shellcheck disable=SC2120
function print_line() {
  width=80
  # Create a string of the specified character repeated to fill the width
  line=$(printf "%${width}s" | tr " " "-")
  # Print the line
  chatter "$1 $line"
}
# wrapper for echo, prints only if show_output is true
function chatter() {
  if [ "$show_output" = true ]; then
    while IFS= read -r line; do
      echo "$2 | $line"
    done <<< "$1"
  fi
}


## checks
# test if flag file is present and less than 1 hours old
function is_flag_valid() {
  if ! [ -f "$1" ]; then
    return 1
  fi
  if test "$(find "$1" -mmin +60)"; then
    rm "$1"
    is_flag_valid
  fi
  return 0
}
# check if tenant variable is present, prompt if not
function is_tenant_name_set() {
  if [ -z "$TENANT_NAME" ]; then
    chatter "TENANT_NAME not set, choose from menu"
    read -r tenant_id TENANT_NAME tenant_number \
      < <(gcloud projects list |
        grep tenant |
        fzf --height=15 \
          --border=block \
          --border-label="Tenant Projects" \
          --tac \
          --header="Select Tenant" \
          --preview="echo Project info; gcloud projects describe {1};")
  fi
  read -r tenant_id TENANT_NAME tenant_number \
    < <(gcloud projects list | grep "$TENANT_NAME")
  read -r cluster_name cluster_location cluster_master_version cluster_master_ip cluster_machine_type cluster_node_version cluster_num_nodes cluster_status \
    < <(gcloud container clusters list --project="$tenant_id" 2> /dev/null | grep backend)
  read -r name zone bastion_machine_type bastion_preemptible bastion_internal_ip bastion_external_ip bastion_status \
    < <(gcloud compute instances list --project="$tenant_id" | grep -v NAME | grep "bastion")
}
# Globalprotect
function is_gp_connected() {
  chatter "  Checking GlobalProtect is connected..."
  if ! (dig +short regscale.internal.dtexgov.com | grep -q ""); then
    chatter "Failed to get internal DNS from mgmt plane. VPN must be down. Launching GlobalProtect..."
    launchctl unload /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*
    launchctl load /Library/LaunchAgents/com.paloaltonetworks.gp.pangp*
  else
    chatter "‚úÖ GlobalProtect connected"
  fi
}

# SSH Tunnels
# create tunnel
function create_tunnel() {
  auth
  close_tunnel
  print_line
  chatter " Creating tunnel... "
  gcloud compute ssh "$name" \
    --project="$tenant_id" \
    --ssh-flag='-M' \
    --ssh-flag='-D 8080' \
    --ssh-flag="-S /tmp/bastion-${TENANT_NAME}" \
    --ssh-flag='-Nf'
}
# close tunnel
function close_tunnel() {
  for socket in /tmp/bastion-*; do
    if [ -S "$socket" ]; then
      chatter "Attempting to close tunnel: "
      ssh -S "$socket" -O exit bastion "${out}" 2> /dev/null
      chatter " Successfully closed tunnel [$socket]"
    else
      chatter " No tunnel to close."
    fi
  done
}

## authentication
function auth() {
  print_line
  is_gp_connected
  if is_flag_valid "$auth_status"; then
    if ! gcloud projects list &> /dev/null; then
      auth_gcp
    fi
  else
    auth_gcp
  fi
  is_tenant_name_set
  auth_helm
  auth_context
}
# authenticate GCP
function auth_gcp() {
  chatter " ‚ùå GCP not authenticated. Authentication starting..."
  chatter "  üîë Authenticating GCP..."
  gcloud auth login --update-adc 2> /dev/null

  if [ -f "$auth_status" ]; then
    rm "$auth_status"
  fi
  touch "$auth_status"
  print_line
  chatter "‚úÖ GCP authenticated"
}
# authenticate Helm
function auth_helm() {
  chatter "  üîë Authenticating Helm..."
  gcloud auth print-access-token | helm registry login -u oauth2accesstoken --password-stdin https://us-docker.pkg.dev 2> /dev/null
}
# get k8s context
function auth_context() {
  chatter "  üîë Authenticating k8s context [$cluster_name]..."
  gcloud container clusters get-credentials "$cluster_name" --region="$cluster_location" --project="$tenant_id" 2> /dev/null
}

## ssh
# menu to select node
function select_vm() {
    # authenticate to GCP + tenant
    auth
    if [ "$hide_gke_vms" = true ]; then
      filter='-labels:goog-gke-node'
    else
      filter=""
    fi
    read -r name zone node_machine_type node_internal_ip node_external_ip node_status < <(gcloud compute instances list --filter="$filter" --project="$tenant_id"  \
      | grep -v NAME \
      | fzf --height=50 \
        --border=block \
        --border-label="Select Node" \
        --tac \
        --header="Select Node" )
    ssh_das "$name"
}

# SSH to the master0 server of a tenant
# $1: node name
function ssh_das() {
  # authenticate to GCP + tenant
  auth
  read -r name zone MACHINE_TYPE PREEMPTIBLE INTERNAL_IP EXTERNAL_IP STATUS < <(gcloud compute instances list --project="$tenant_id" | grep -v NAME | grep "$1")
  if [ "$interactive_shell" = false ]; then
    chatter " Connecting to master0 and downloading effective config..."
    cmd=$(printf "gcloud compute ssh --zone='%s' '%s' --tunnel-through-iap --project='%s' -- sudo dt fetch-effective-config -s deep self > %s.yaml" "$zone" "$name" "$tenant_id" "$tenant_id")
  else
    cmd=$(printf "gcloud compute ssh --zone='%s' '%s' --tunnel-through-iap --project='%s' %s" "$zone" "$name" "$tenant_id" "$output")
  fi
  chatter "=========== SSH Session to $name ================================"
  chatter "‚ÑπÔ∏è  SSH to [$TENANT_NAME] $cmd"
  eval "$cmd"
}

# prints usage
function usage() {
  chatter "Usage: bastion [options]"
  chatter "Options:"
  chatter "Run without flags to refresh GCP authentication"
  chatter "   -v Verbose mode (set -x)"
  chatter "   -q Silent mode"
  chatter "   -g used to show GKE VMs with -w"
  chatter "   -k closes all tunnels"
  chatter "   -t creates a tunnel to a tenant, specified with env: TENANT_NAME"
  chatter "   -w Wizard mode. Select a VM to SSH to from a list"
  chatter "   -s SSH to master0 of a tenant, specified with env: TENANT_NAME"
  chatter "   -c downloads effective config from master0, specified with env: TENANT_NAME"
  chatter "   -h help"
}


# main function
function main() {
  auth_status="${HOME}/bastion-authed"
  is_flag_valid "$auth_status"
  # Variables
  export CLOUDSDK_PYTHON_SITEPACKAGES=1
  unset HTTPS_PROXY

  ## ---- Defaults ---- ##
  show_output=true
  hide_gke_vms=true
  interactive_shell=true

  while getopts vqgktwsch flag; do
    case "$flag" in
    v) set -ex ;;
    q) show_output=false ;;
    g) hide_gke_vms=false ;;
    c) interactive_shell=false ; ssh_das ; exit ;;
    k) close_tunnel ; exit ;;
    t) create_tunnel ; exit ;;
    w) select_vm ; exit ;;
    s) ssh_das ; exit ;;
    h | *) usage ; exit ;;
    esac
  done
  auth_gcp
  chatter "üöÄ Tenant [$TENANT_NAME] Tenant Project [${tenant_id}] | Cluster [${cluster_name}]"
}
main "$@"
